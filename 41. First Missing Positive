https://leetcode.com/problems/first-missing-positive/
class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        if(nums.size()==0){
            return 1;
        }
        if(nums.size()==1){
            if(nums[0]<=0){
                return 1;
            }else{
                if(nums[0]==1){
                    return 2;
                }else{
                    return 1;
                }
            }
        }
        if(nums[nums.size()-1]<=0){
            return 1;
        }
        int j = 0;
        while(nums.size()!=0 && nums[j]<=0){
            nums.erase(nums.begin(),nums.begin()+1);
        }
        if(nums[0]>1){
            return 1;
        }
        bool fl = true;
        int i = 0;
        for(i = 0; i<nums.size()-1; i++){
            if(nums[i+1]-nums[i]>1){
                fl = false;
                break;
            }
        }
        if(fl == true){
            return nums[nums.size()-1]+1;
        }else{
            return nums[i]+1;
        }
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> nums = stringToIntegerVector(line);
        
        int ret = Solution().firstMissingPositive(nums);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
