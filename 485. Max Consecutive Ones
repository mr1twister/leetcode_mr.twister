https://leetcode.com/problems/max-consecutive-ones/
class Solution {
public:
    int findMaxConsecutiveOnes(vector<int>& nums) {
        if(nums.size()==0){
            return 0;
        }
        if(nums.size()==1){
            if(nums[0]==1){
                return 1;
            }else{
                return 0;
            }
        }
        vector<int> p;
        int k =0;
        for (int i = 0; i<nums.size();i++){
            if(nums[i]==1){
              k++;
            }  else{
                p.push_back(k);
                k=0;
            }
        }
        if(k!=0){
            p.push_back(k);
        }
        int max=p[0];
        for (int i =1; i<p.size(); i++){
            if(p[i]>max){
                max=p[i];
            }
        }
        return max;
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> nums = stringToIntegerVector(line);
        
        int ret = Solution().findMaxConsecutiveOnes(nums);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
