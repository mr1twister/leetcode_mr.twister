https://leetcode.com/problems/find-pivot-index/
class Solution {
public:
    int pivotIndex(vector<int>& nums) {
        if(nums.size() == 0){
            return -1;
        }
        if(nums.size()==1){
            return 0;
        }
        if(nums.size()==2){
            return -1;
        }
        int sum1= 0;
        int sum2= 0;
        bool fl = false;
        int i = 0;
        for(i = 0; i<nums.size(); i++){
            sum1 = 0;
            sum2 = 0;
            for(int j = 0; j<i; j++){
                sum1 = sum1+nums[j];
            }
            for(int  k = i+1; k<nums.size(); k++){
                sum2 = sum2 + nums[k];
            }
            if(sum1 == sum2){
                fl = true;
                break;
            }
        }
        if(fl == false){
            return -1;
        }else{
            return i;
        }
    }
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> nums = stringToIntegerVector(line);
        
        int ret = Solution().pivotIndex(nums);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
