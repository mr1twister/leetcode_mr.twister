https://leetcode.com/problems/implement-strstr/submissions/
class Solution {
public:
    int strStr(string haystack, string needle) {
        bool fl = false;
        int kol = 0;
        if((haystack.size()== 0 && needle.size() == 0)||(needle.size() == 0)){
            return 0;
        }
        for(int i = 0; i<haystack.size(); i++){
            if(needle.size()==1){
                if(haystack[i]==needle[0]){
                    return 0;
                }
            }
            if(haystack[i]==needle[0]){
                kol = i;
                int z = 1;
                for(int j = (i+1); j<=i+(needle.size()-1);j++){
                    if(haystack[j]==needle[z]){
                        fl = true;
                        z++;
                    }else{
                        fl = false;
                        break;
                    }
                }
            }
            if(fl){
                break;
            }
        }
        if(!fl){
            return -1;
        }else{
            return kol;
        }
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int main() {
    string line;
    while (getline(cin, line)) {
        string haystack = stringToString(line);
        getline(cin, line);
        string needle = stringToString(line);
        
        int ret = Solution().strStr(haystack, needle);

        string out = to_string(ret);
        cout << out << endl;
    }
    return 0;
}
