https://leetcode.com/problems/3sum/
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        std::vector<vector <int>> res{};
        int sum=0;
        if (nums.size()<3){return res;}
        sort(nums.begin(), nums.end());
        int min=0;
        while (nums[min] < 0){
            min++;
            if(min>=nums.size()){return res;}
        }
        for(int i = 0; i<=min; i++){
            int j = i+1;
            int k = nums.size()-1;
            while(j<k){
                sum = nums[i]+nums[j]+nums[k];
                if(sum == 0){
                    res.push_back({nums[i], nums[j], nums[k]});
                    j++;
                    k--;
                    while((j<k)&& (nums[j]==nums[j-1])){
                        j++;
                    }       
                    while((j<k)&& (nums[k]==nums[k+1])){
                        k--;
                    }
                }
                else if (sum > 0){
                    k--;
                    while((j<k) && (nums[k]==nums[k+1])){
                        k--;
                              }
                }else if (sum < 0){
                        j++;
                     while((j<k)&&(nums[j]==nums[j-1])){
                        j++;
                        }  
                    }                  
                }
                
              while((i+1 < nums.size())&&(nums[i]==nums[i+1])){
                  i++;
                }
        }
      return res;
    }  
};
