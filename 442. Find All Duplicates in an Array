https://leetcode.com/problems/find-all-duplicates-in-an-array/
class Solution {
public:
	vector<int> findDuplicates(vector<int>& nums) {
		vector<int> answer;
		int k, i;
		if (nums.size() < 2)
		{
			return answer;

		}
		else
		{
			if (nums.size() == 2)
			{
				if (nums[0] == nums[1])
				{
					answer.push_back(nums[1]);
				}
				return answer;



			}

			else

			{
				sort(nums.begin(), nums.end());
				for (i = 0; i < nums.size() - 1; i++)
				{
					k = 1;
					if (nums[i] == nums[i + 1])
					{
						k++;
						i++;
					}
					if (k == 2)
					{
						answer.push_back(nums[i]);
					}


				}


				return answer;
			}
		}
	}
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

string integerVectorToString(vector<int> list, int length = -1) {
    if (length == -1) {
        length = list.size();
    }

    if (length == 0) {
        return "[]";
    }

    string result;
    for(int index = 0; index < length; index++) {
        int number = list[index];
        result += to_string(number) + ", ";
    }
    return "[" + result.substr(0, result.length() - 2) + "]";
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> nums = stringToIntegerVector(line);
        
        vector<int> ret = Solution().findDuplicates(nums);

        string out = integerVectorToString(ret);
        cout << out << endl;
    }
    return 0;
}
