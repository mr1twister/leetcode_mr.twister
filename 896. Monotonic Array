https://leetcode.com/problems/monotonic-array/
class Solution {
public:
bool isMonotonic(vector<int>& nums) {
        int i=0;
        int k;
        k=0;
        bool fl;
        if(nums.size()<=2)
        {
            return true;
        }
        else
        {
            while((i<nums.size()-1)&&(nums[i]==nums[i+1]))
            {
                i++;
            }
            if(i==nums.size()-1)
            {
                return true;
            }
            else
            {
            fl=true;
            if(nums[i]>nums[i+1])
            {
                while((i<nums.size()-1)&&fl)
            {
            if(nums[i]>=nums[i+1])
                {
                    i++;
                }
            else
            {
                fl=false;
            }
            }
        }
            else
            {
                while((i<nums.size()-1)&&fl)
                {
                    if(nums[i]<=nums[i+1])
                        {
                    i++;
                }
            else
        {
    fl=false;
}
}
}
}
}
return fl;
}
};

void trimLeftTrailingSpaces(string &input) {
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) {
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

vector<int> stringToIntegerVector(string input) {
    vector<int> output;
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    stringstream ss;
    ss.str(input);
    string item;
    char delim = ',';
    while (getline(ss, item, delim)) {
        output.push_back(stoi(item));
    }
    return output;
}

string boolToString(bool input) {
    return input ? "True" : "False";
}

int main() {
    string line;
    while (getline(cin, line)) {
        vector<int> A = stringToIntegerVector(line);
        
        bool ret = Solution().isMonotonic(A);

        string out = boolToString(ret);
        cout << out << endl;
    }
    return 0;
}
