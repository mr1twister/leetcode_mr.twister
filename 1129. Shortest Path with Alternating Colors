https://leetcode.com/problems/shortest-path-with-alternating-colors/

class Solution {
public:
    vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& red, vector<vector<int>>& blue) {
        vector<vector<pair<int, int>>> graph(n);
        for(int i = 0; i<red.size(); i++)  
            graph[red[i][0]].push_back({red[i][1], 0});
        for(int i = 0; i<blue.size(); i++)  
            graph[blue[i][0]].push_back({blue[i][1], 1});
        vector<vector<bool>> visited(n, vector(2, false));
        queue<pair<int, int>> q;
        vector<int> res(n, -1);
        q.push({0, -1});
        int cur_length = 0;
        while(!q.empty()){
            int s = q.size();
            for(int i = 0; i < s; ++i){
                pair<int,int> cur = q.front();  
                q.pop();
                if(res[cur.first] == -1)  
                    res[cur.first] = cur_length;
                for(int i = 0; i<graph[cur.first].size(); i++){
                    if(graph[cur.first][i].second != cur.second && !visited[graph[cur.first][i].first][graph[cur.first][i].second]){
                        visited[graph[cur.first][i].first][graph[cur.first][i].second] = true;
                        q.push(graph[cur.first][i]);
                    }
                }
            }
            cur_length++;
        }
        return res;
    }
};
